exports.signup = async (req,res)=>{
    try{
        // fetch the data from req body
        const {firstName,
                lastName,
                email,
                password,
                confirmPassword,
                accountType,
                contactNumber,
                otp
            } = req.body;
        // validate all the details
        if (
			!firstName ||
			!lastName ||
			!email ||
			!password ||
			!confirmPassword ||
			!otp
		) {
			return res.status(403).send({
				success: false,
				message: "All Fields are required",
			});
		}
        // check if password and confirm password matches or not
        if(password !== confirmPassword){
            return res.status(400).json({
				success: false,
				message:
					"Password and Confirm Password didn't match. Please try again."
			});

        }
        // check if user already exist or not
        const existingUser = await User.findOne({email:email});
		if (existingUser) {
			return res.status(400).json({
				success: false,
				message: "User already exists. Please sign in to continue.",
			});
		}
        // find the most recent otp
        const response = await OTP.find({email:email}).sort({createdAt:-1}).limit(1);
             // otp not found
        if(response.length === 0){
            return res.status(400).json({
				success: false,
				message: "OTP doesn't exist",
			});
        }
            // Invalid otp
        else if(response[0].otp !== otp){
            return res.status(400).json({
				success: false,
				message: "The OTP is not valid",
			});
        }
        // hash the password
        const hashedPassword = await bcrypt.hash(password,10);
        // create additional detail(profile) for user
        const profileDetails = await Profile.create({
            gender: null,
			dateOfBirth: null,
			about: null,
			contactNumber: null,
        })
        // create entry in DB
        const user = await User.create({
            firstName,
            lastName,
            email,
            contactNumber,
            password:hashedPassword,
            accountType:accountType,
            additionalDetails:profileDetails._id
        })
        // return response
        return res.status(200).json({
			success: true,
			user,
			message: "User registered successfully",
		});
    } catch(error){

        console.log("Failed to signUp",error.message)
        return res.status(500).json({ 
            success: false, 
            error: error.message })
    }
}

exports.login = async(req,res)=>{
    try{
        // get email and password form req body
    const {email,password} = req.body;
    // validate email and password
    if (!email || !password) {
        return res.status(400).json({
            success: false,
            message: `Please Fill up All the Required Fields`,
        });
    }
    // check user exist or not 
    const user = await User.findOne({email:email});
    if(!user){
        return res.status(401).json({
            status:false,
            message:"User is not registered.Plaese signup"
        })
    }
    // compare password and generate JWT token
    if(await bcrypt.compare(password,user.password)){
        const token = jwt.sign({
            email:user.email,
            id:user._id,
            accountType:user.accountType
        },
        process.env.JWT_SECRET,
        {
            expiresIn : "24h"
        }
        )
        user.token = token;
        user.password = null;

        const options = {
            expires : new Date(Date.now() + 3 * 24 * 60 * 60 * 1000),
            httpOnly:true
        }
        // send cookies and return response
        res.cookie("token",token,options).status(200).json({
                success: true,
				token,
				user,
				message: "User logged in successfully",
        })
    } else{
        return res.status(401).json({
            success: false,
            message: "Password is incorrect",
        });
    }

    } catch(error){
        return res.status(500).json({
			success: false,
			message: "Cannot login.Please try again",
		});
    }
    
}

exports.resetPasswordToken = async(req,res)=>{
    try{
        const {email} = req.body;

    const user = await User.findOne({email:email});
    if (!user) {

        
        return res.json({
            success: false,
            message: `This Email: ${email} is not Registered With Us Enter a Valid Email `,
        });
    }
    const token = crypto.randomBytes(20).toString("hex");
    const updatedDetails = await User.findOneAndUpdate(
        {email:email},
        {
            token:token,
            resetPasswordExpires:Date.now() + 60 * 60 * 1000
        },
        {new:true}
    )
        // YOU NEED TO CHANGE THIS IN FUTURE
    const url = `https://studynotion/update-password/${token}`; // YOU NEED TO UPDATE WITH ORIGINAL URL THEN IT WILL WORK

    await mailSender(
        email,
        "Password Reset",
        `Your Link for email verification is ${url}. Please click this url to reset your password.`
    )
    console.log(updatedDetails);
    return res.status(200).json({
        success: true,
        message: "Email Sent Successfully, Please Check Your Email to Continue Further",
    });
    } catch(error){
        return res.json({
			error: error.message,
			success: false,
			message: `Some Error in Sending the Reset Message`,
		});
    }
}

exports.resetPassword = async(req,res)=>{
    try{
        const{password, confirmPassword} = req.body;
        const {token} = req.params;

        if (confirmPassword !== password) {
			return res.status(401).json({
				success: false,
				message: "Password and Confirm Password Does not Match",
			});
		}

        const userDetails = await User.findOne({token:token});
        if (!userDetails) {
			return res.status(400).json({
				success: false,
				message: "Token is Invalid",
			});
		}
        if(userDetails.resetPasswordExpires < Date.now()){
            return res.status(400).json({
                status:false,
                message:"Token has been expired.Please try to regenerate token"
            })
        }
        const encryptedPassword = await bcrypt.hash(password,10);
        await User.findOneAndUpdate(
            {token:token},
            {
                password:encryptedPassword
            },
            {new:true}
        );
        return res.status(200).json({
			success: true,
			message: `Password Reset Successful`,
		});

    } catch(error){
        return res.status(400).json({
			error: error.message,
			success: false,
			message: `Some Error in Updating the Password`,
		});
    }
}